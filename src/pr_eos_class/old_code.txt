void pr_eos::calc_cp()
{
    getZ();
    //cp const data
    // std::unique_ptr<std::vector<CP_Const>> cp_const = mydbclass.get_cp_const_pointer();
    // CpIG = A + B.T + C.T² + D.T³
    // float* cp_R = new float[size_of_gas_data];
    float cp_ig = 0; // gives the Cp in CAL/G-MOLE-K
    uint16_t j = 0;
    for(const auto& i : *base_data_pt)
        cp_ig = cp_ig +  i.yi*(cp_const->at(j).A + t_reserve*cp_const->at(j).B 
                                + t_reserve*t_reserve*cp_const->at(j).C
                                + t_reserve*t_reserve*t_reserve*cp_const->at(j).D);

    cp_ig = 4.1868 * cp_ig; // converted to J / mol . K
    float cv_ig = cp_ig - r;

    // now the struggle starts
    float cp_r = 0, cv_r = 0;
    j=0;
    p = p * 1000000; //change to pascals
    float v = ((z * r * t) / p);
    for(const auto& i : pr_mix_data)
    {
        // step 1
        float dPdVatT = ((-r * t) / ((v - i.b) * (v - i.b))) + 2 * i.a * (v + i.b) / ((v * (v + i.b) + i.b * (v - i.b)) * (v * (v + i.b) + i.b * (v - i.b)));
        
        // step 2
        float dadTatV = -i.k * i.ac / (sqrt(t * base_data_pt->at(j).tc) * (1 + i.k * (1 - sqrt(t / base_data_pt->at(j).tc))));
        float dPdTatV = r / (v - i.b) - dadTatV / (v * (v + i.b) + i.b * (v - i.b));
        float dTdPatV = 1 / dPdTatV;

        // step 3 
        float daadTatP = (p / (r * r * t_reserve * t_reserve)) * (dadTatV - 2 * i.a / t_reserve);
        float dbbdTatP = -b * p / (r * t_reserve * t_reserve);

        float Num = daadTatP * (bb - z) + dbbdTatP * (6 * bb * z + 2 * z - 3 * bb * bb - 2 * bb + aa - z * z);
        float Denom = 3 * z * z + 2 * (bb - 1) * z + (aa - 2 * bb - 3 * bb * bb);

        float dZdTatP = Num / Denom;

        float dVdTatP = (r / p) * (t_reserve * dZdTatP + z);



        // last step to success
        float aDoubleDash = i.ac * i.k * (1 + i.k) * sqrt(base_data_pt->at(j).tc / t_reserve) / (2 * t_reserve * base_data_pt->at(j).tc);
        float Cvr = (t_reserve * aDoubleDash / (i.b * sqrt(8))) * log((z + bb * (1 + sqrt(2))) / (z + bb * (1 - sqrt(2))));
        float Cpr = Cvr + t_reserve * dPdTatV * dVdTatP - r;
        
        // atlast
        cp_r = cp_r + Cpr;
        cv_r = cv_r + Cvr;
        j++;
    }

    cp = cp_r + cp_ig;
    cv = cv_r + cv_ig;
}

float pr_eos::get_cp()
{
    calc_cp();
    std::cout<<"\n\ncp value is "<<cp<<"\n\n";
    return cp;
}